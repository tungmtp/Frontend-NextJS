"use client";
import React, {
  createContext,
  useContext,
  useEffect,
  useState,
  useRef,
} from "react";
import "./globals.css";
import ReduxProvider from "@/redux/ReduxProvider";
import TopBar from "@/components/topbar/Topbar";
import SideBar from "@/components/sidebar/Sidebar";
import Box from "@mui/material/Box";
import { styled, useTheme } from "@mui/material/styles";
import { usePathname } from "next/navigation";

// import { useRouter } from "next/navigation";

// export const metadata = {
//   title: "SÀN GỖ NEWSKY",
//   description: "Generated by create next app",
// };
const DrawerHeader = styled("div")(({ theme }) => ({
  display: "flex",
  alignItems: "center",
  justifyContent: "flex-end",
  padding: theme.spacing(0, 1),
  // necessary for content to be below app bar
  ...theme.mixins.toolbar,
}));
export default function RootLayout({ children }) {
  const [open, setOpen] = React.useState(true);

  const handleDrawerOpen = () => {
    setOpen(true);
  };
  const handleDrawerClose = () => {
    setOpen(false);
  };
  const pathname = usePathname();

  let pathname1 = pathname.split("/");
  let pathSplit = pathname1[1];

  //event source
  const handleMessage = (event) => {
    const data = JSON.parse(event.data);
    // console.log("Received data:", data);
    const customEvent = new CustomEvent("newDataEvent", {
      detail: data,
    });
    window.dispatchEvent(customEvent);
  };

  const eventSource = useEventSource(handleMessage);
  return (
    <html lang="en">
      <head>
        <title>SÀN GỖ NEWSKY</title>
        <meta name="description" content="Generated by create next app" />
      </head>
      <body>
        {/* {!isLoginPage && <Sidebar />} */}
        <ReduxProvider>
          <div style={{ display: "flex", flexDirection: "column" }}>
            {" "}
            {pathSplit != "login" && (
              <TopBar
                open={open}
                handleDrawerOpen={handleDrawerOpen}
                handleDrawerClose={handleDrawerClose}
              />
            )}
            <div style={{ display: "flex" }}>
              {pathSplit != "login" && (
                <SideBar
                  open={open}
                  handleDrawerOpen={handleDrawerOpen}
                  handleDrawerClose={handleDrawerClose}
                />
              )}
              <Box component="main" sx={{ flexGrow: 1, p: 3, height: "664px" }}>
                <DrawerHeader />
                {children}
              </Box>
            </div>
          </div>
        </ReduxProvider>
      </body>
    </html>
  );
}
const useEventSource = (onMessage) => {
  const eventSourceRef = useRef(null);

  useEffect(() => {
    const eventSource = new EventSource(
      "http://123.31.12.44:8080/rabbitMQ/events"
    );
    eventSourceRef.current = eventSource;

    eventSource.addEventListener("message", onMessage);

    // Xử lý sự kiện kết nối bị đóng
    eventSource.addEventListener("error", () => {
      console.error("EventSource failed.");
    });

    return () => {
      eventSource.close();
    };
  }, [onMessage]);

  return eventSourceRef;
};
